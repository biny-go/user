// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.4
// source: api/hello.proto

package api

import (
	context "context"
	common "github.com/biny-go/loong/proto/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Hello_SaveHello_FullMethodName   = "/api.Hello/SaveHello"
	Hello_DeleteHello_FullMethodName = "/api.Hello/DeleteHello"
	Hello_GetHello_FullMethodName    = "/api.Hello/GetHello"
	Hello_ListHello_FullMethodName   = "/api.Hello/ListHello"
)

// HelloClient is the client API for Hello service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloClient interface {
	SaveHello(ctx context.Context, in *SaveHelloRequest, opts ...grpc.CallOption) (*common.BaseResult, error)
	DeleteHello(ctx context.Context, in *DeleteHelloRequest, opts ...grpc.CallOption) (*common.BaseResult, error)
	GetHello(ctx context.Context, in *GetHelloRequest, opts ...grpc.CallOption) (*common.BaseResult, error)
	ListHello(ctx context.Context, in *ListHelloRequest, opts ...grpc.CallOption) (*common.BaseResultArray, error)
}

type helloClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloClient(cc grpc.ClientConnInterface) HelloClient {
	return &helloClient{cc}
}

func (c *helloClient) SaveHello(ctx context.Context, in *SaveHelloRequest, opts ...grpc.CallOption) (*common.BaseResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.BaseResult)
	err := c.cc.Invoke(ctx, Hello_SaveHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloClient) DeleteHello(ctx context.Context, in *DeleteHelloRequest, opts ...grpc.CallOption) (*common.BaseResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.BaseResult)
	err := c.cc.Invoke(ctx, Hello_DeleteHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloClient) GetHello(ctx context.Context, in *GetHelloRequest, opts ...grpc.CallOption) (*common.BaseResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.BaseResult)
	err := c.cc.Invoke(ctx, Hello_GetHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloClient) ListHello(ctx context.Context, in *ListHelloRequest, opts ...grpc.CallOption) (*common.BaseResultArray, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.BaseResultArray)
	err := c.cc.Invoke(ctx, Hello_ListHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloServer is the server API for Hello service.
// All implementations must embed UnimplementedHelloServer
// for forward compatibility.
type HelloServer interface {
	SaveHello(context.Context, *SaveHelloRequest) (*common.BaseResult, error)
	DeleteHello(context.Context, *DeleteHelloRequest) (*common.BaseResult, error)
	GetHello(context.Context, *GetHelloRequest) (*common.BaseResult, error)
	ListHello(context.Context, *ListHelloRequest) (*common.BaseResultArray, error)
	mustEmbedUnimplementedHelloServer()
}

// UnimplementedHelloServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHelloServer struct{}

func (UnimplementedHelloServer) SaveHello(context.Context, *SaveHelloRequest) (*common.BaseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveHello not implemented")
}
func (UnimplementedHelloServer) DeleteHello(context.Context, *DeleteHelloRequest) (*common.BaseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHello not implemented")
}
func (UnimplementedHelloServer) GetHello(context.Context, *GetHelloRequest) (*common.BaseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHello not implemented")
}
func (UnimplementedHelloServer) ListHello(context.Context, *ListHelloRequest) (*common.BaseResultArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHello not implemented")
}
func (UnimplementedHelloServer) mustEmbedUnimplementedHelloServer() {}
func (UnimplementedHelloServer) testEmbeddedByValue()               {}

// UnsafeHelloServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloServer will
// result in compilation errors.
type UnsafeHelloServer interface {
	mustEmbedUnimplementedHelloServer()
}

func RegisterHelloServer(s grpc.ServiceRegistrar, srv HelloServer) {
	// If the following call pancis, it indicates UnimplementedHelloServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Hello_ServiceDesc, srv)
}

func _Hello_SaveHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).SaveHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hello_SaveHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).SaveHello(ctx, req.(*SaveHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hello_DeleteHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).DeleteHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hello_DeleteHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).DeleteHello(ctx, req.(*DeleteHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hello_GetHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).GetHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hello_GetHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).GetHello(ctx, req.(*GetHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hello_ListHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).ListHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hello_ListHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).ListHello(ctx, req.(*ListHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Hello_ServiceDesc is the grpc.ServiceDesc for Hello service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hello_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Hello",
	HandlerType: (*HelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveHello",
			Handler:    _Hello_SaveHello_Handler,
		},
		{
			MethodName: "DeleteHello",
			Handler:    _Hello_DeleteHello_Handler,
		},
		{
			MethodName: "GetHello",
			Handler:    _Hello_GetHello_Handler,
		},
		{
			MethodName: "ListHello",
			Handler:    _Hello_ListHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/hello.proto",
}
