// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.4
// source: api/hello.proto

package api

import (
	context "context"
	common "github.com/biny-go/loong/proto/common"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationHelloDeleteHello = "/api.Hello/DeleteHello"
const OperationHelloGetHello = "/api.Hello/GetHello"
const OperationHelloListHello = "/api.Hello/ListHello"
const OperationHelloSaveHello = "/api.Hello/SaveHello"

type HelloHTTPServer interface {
	DeleteHello(context.Context, *DeleteHelloRequest) (*common.BaseResult, error)
	GetHello(context.Context, *GetHelloRequest) (*common.BaseResult, error)
	ListHello(context.Context, *ListHelloRequest) (*common.BaseResultArray, error)
	SaveHello(context.Context, *SaveHelloRequest) (*common.BaseResult, error)
}

func RegisterHelloHTTPServer(s *http.Server, srv HelloHTTPServer) {
	r := s.Route("/")
	r.POST("/hello", _Hello_SaveHello0_HTTP_Handler(srv))
	r.DELETE("/hello", _Hello_DeleteHello0_HTTP_Handler(srv))
	r.GET("/hello", _Hello_GetHello0_HTTP_Handler(srv))
	r.POST("/hello/list", _Hello_ListHello0_HTTP_Handler(srv))
}

func _Hello_SaveHello0_HTTP_Handler(srv HelloHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveHelloRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHelloSaveHello)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveHello(ctx, req.(*SaveHelloRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.BaseResult)
		return ctx.Result(200, reply)
	}
}

func _Hello_DeleteHello0_HTTP_Handler(srv HelloHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteHelloRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHelloDeleteHello)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteHello(ctx, req.(*DeleteHelloRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.BaseResult)
		return ctx.Result(200, reply)
	}
}

func _Hello_GetHello0_HTTP_Handler(srv HelloHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetHelloRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHelloGetHello)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetHello(ctx, req.(*GetHelloRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.BaseResult)
		return ctx.Result(200, reply)
	}
}

func _Hello_ListHello0_HTTP_Handler(srv HelloHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListHelloRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHelloListHello)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListHello(ctx, req.(*ListHelloRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.BaseResultArray)
		return ctx.Result(200, reply)
	}
}

type HelloHTTPClient interface {
	DeleteHello(ctx context.Context, req *DeleteHelloRequest, opts ...http.CallOption) (rsp *common.BaseResult, err error)
	GetHello(ctx context.Context, req *GetHelloRequest, opts ...http.CallOption) (rsp *common.BaseResult, err error)
	ListHello(ctx context.Context, req *ListHelloRequest, opts ...http.CallOption) (rsp *common.BaseResultArray, err error)
	SaveHello(ctx context.Context, req *SaveHelloRequest, opts ...http.CallOption) (rsp *common.BaseResult, err error)
}

type HelloHTTPClientImpl struct {
	cc *http.Client
}

func NewHelloHTTPClient(client *http.Client) HelloHTTPClient {
	return &HelloHTTPClientImpl{client}
}

func (c *HelloHTTPClientImpl) DeleteHello(ctx context.Context, in *DeleteHelloRequest, opts ...http.CallOption) (*common.BaseResult, error) {
	var out common.BaseResult
	pattern := "/hello"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHelloDeleteHello))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *HelloHTTPClientImpl) GetHello(ctx context.Context, in *GetHelloRequest, opts ...http.CallOption) (*common.BaseResult, error) {
	var out common.BaseResult
	pattern := "/hello"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHelloGetHello))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *HelloHTTPClientImpl) ListHello(ctx context.Context, in *ListHelloRequest, opts ...http.CallOption) (*common.BaseResultArray, error) {
	var out common.BaseResultArray
	pattern := "/hello/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationHelloListHello))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *HelloHTTPClientImpl) SaveHello(ctx context.Context, in *SaveHelloRequest, opts ...http.CallOption) (*common.BaseResult, error) {
	var out common.BaseResult
	pattern := "/hello"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationHelloSaveHello))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
